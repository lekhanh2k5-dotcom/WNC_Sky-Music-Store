<nav class="relative z-10 p-6">
    <div class="max-w-7xl mx-auto flex justify-between items-center">
        <div class="flex items-center space-x-3">
            <div class="w-12 h-12 bg-white bg-opacity-20 rounded-full flex items-center justify-center backdrop-blur-sm">
                <span class="text-2xl music-note">üéµ</span>
            </div>
            <h1 class="orbitron text-2xl font-bold text-white">Sky Music Store</h1>
        </div>
        
        <div class="hidden md:flex space-x-8 inter">
            <a href="{{ url('/') }}" class="nav-link text-white hover:text-yellow-300 transition-colors {{ request()->is('/') ? 'active' : '' }}">Trang Ch·ªß</a>
            <a href="{{ url('/shop') }}" class="nav-link text-white hover:text-yellow-300 transition-colors {{ request()->is('shop') ? 'active' : '' }}">Shop</a>
            <a href="{{ url('/community') }}" class="nav-link text-white hover:text-yellow-300 transition-colors {{ request()->is('community') ? 'active' : '' }}">C·ªông ƒê·ªìng</a>
            <a href="{{ url('/support') }}" class="nav-link text-white hover:text-yellow-300 transition-colors {{ request()->is('support') ? 'active' : '' }}">H·ªó Tr·ª£</a>
        </div>
        
        <!-- Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p v·ªõi Firebase -->
        <div id="auth-section">
            <!-- Hi·ªÉn th·ªã khi ƒë√£ ƒëƒÉng nh·∫≠p (·∫©n m·∫∑c ƒë·ªãnh) -->
            <div id="logged-in-section" class="hidden flex items-center space-x-4">
                <!-- Hi·ªÉn th·ªã ·∫£nh ƒë·∫°i di·ªán -->
                <a href="/account" class="flex items-center space-x-2">
                    <img id="user-avatar" src="/img/default-avatar.svg" alt="Avatar" class="w-10 h-10 rounded-full border-2 border-white">
                    <span id="user-name" class="text-white">User</span>
                </a>

                <!-- Hi·ªÉn th·ªã s·ªë xu v√† gi·ªè h√†ng tr√™n trang Shop -->
                @if(request()->is('shop*'))
                    <span id="user-coins" class="text-yellow-300 font-bold">Xu: 0</span>
                    <a href="/shop/cart" class="bg-white bg-opacity-20 text-white px-4 py-2 rounded-lg hover:bg-opacity-30 transition-all">
                        üõí Gi·ªè H√†ng
                    </a>
                @endif

                <!-- N√∫t ƒêƒÉng Xu·∫•t -->
                <button id="logout-btn" class="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-all">
                    ƒêƒÉng Xu·∫•t
                </button>
            </div>

            <!-- Hi·ªÉn th·ªã khi ch∆∞a ƒëƒÉng nh·∫≠p (hi·ªÉn th·ªã m·∫∑c ƒë·ªãnh) -->
            <div id="logged-out-section">
                <a href="{{ route('login') }}" class="bg-white bg-opacity-20 text-white px-6 py-2 rounded-full backdrop-blur-sm hover:bg-opacity-30 transition-all inter">
                    ƒêƒÉng Nh·∫≠p
                </a>
            </div>
        </div>
    </div>
</nav>

<script type="module">
    try {
        // Import Firebase auth t·ª´ config file
        const { auth } = await import('/js/firebase-config.js');
        const { onAuthStateChanged, signOut } = await import('https://www.gstatic.com/firebasejs/10.1.0/firebase-auth.js');

        console.log('Firebase modules loaded successfully');

        // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
        onAuthStateChanged(auth, (user) => {
            console.log('Auth state changed:', user ? 'logged in' : 'logged out');
            
            const loggedInSection = document.getElementById('logged-in-section');
            const loggedOutSection = document.getElementById('logged-out-section');
            
            if (!loggedInSection || !loggedOutSection) {
                console.error('Auth sections not found in DOM');
                return;
            }
            
            if (user) {
                // Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
                console.log('User logged in:', user.email);
                
                // ·∫®n n√∫t ƒëƒÉng nh·∫≠p
                loggedOutSection.style.display = 'none';
                loggedOutSection.classList.add('hidden');
                
                // Hi·ªÉn th·ªã section ƒë√£ ƒëƒÉng nh·∫≠p
                loggedInSection.style.display = 'flex';
                loggedInSection.classList.remove('hidden');
                loggedInSection.classList.add('flex');
                
                // C·∫≠p nh·∫≠t th√¥ng tin user
                const userNameEl = document.getElementById('user-name');
                const userAvatarEl = document.getElementById('user-avatar');
                
                if (userNameEl) {
                    userNameEl.textContent = user.displayName || user.email.split('@')[0];
                }
                if (userAvatarEl) {
                    userAvatarEl.src = user.photoURL || '/img/default-avatar.png';
                }
                
                // L·∫•y th√¥ng tin coins t·ª´ Firestore n·∫øu c·∫ßn
                // fetchUserCoins(user.uid);
                
            } else {
                // Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p
                console.log('User logged out');
                
                // ·∫®n section ƒë√£ ƒëƒÉng nh·∫≠p
                loggedInSection.style.display = 'none';
                loggedInSection.classList.add('hidden');
                loggedInSection.classList.remove('flex');
                
                // Hi·ªÉn th·ªã n√∫t ƒëƒÉng nh·∫≠p
                loggedOutSection.style.display = 'block';
                loggedOutSection.classList.remove('hidden');
            }
        });

        // X·ª≠ l√Ω ƒëƒÉng xu·∫•t - ƒë·ª£i DOM load xong
        document.addEventListener('DOMContentLoaded', () => {
            const logoutBtn = document.getElementById('logout-btn');
            if (logoutBtn) {
                logoutBtn.addEventListener('click', async (e) => {
                    e.preventDefault();
                    try {
                        console.log('Logging out...');
                        await signOut(auth);
                        console.log('Logged out successfully');
                        // Kh√¥ng c·∫ßn redirect v√¨ onAuthStateChanged s·∫Ω t·ª± ƒë·ªông update UI
                    } catch (error) {
                        console.error('L·ªói ƒëƒÉng xu·∫•t:', error);
                        alert('C√≥ l·ªói khi ƒëƒÉng xu·∫•t. Vui l√≤ng th·ª≠ l·∫°i.');
                    }
                });
            }
        });

        // N·∫øu DOM ƒë√£ load r·ªìi th√¨ g√°n event ngay
        if (document.readyState === 'loading') {
            // DOM ch∆∞a load xong
        } else {
            // DOM ƒë√£ load xong
            const logoutBtn = document.getElementById('logout-btn');
            if (logoutBtn) {
                logoutBtn.addEventListener('click', async (e) => {
                    e.preventDefault();
                    try {
                        console.log('Logging out...');
                        await signOut(auth);
                        console.log('Logged out successfully');
                    } catch (error) {
                        console.error('L·ªói ƒëƒÉng xu·∫•t:', error);
                        alert('C√≥ l·ªói khi ƒëƒÉng xu·∫•t. Vui l√≤ng th·ª≠ l·∫°i.');
                    }
                });
            }
        }

    } catch (error) {
        console.error('Firebase initialization error:', error);
        
        // Fallback: hi·ªÉn th·ªã n√∫t ƒëƒÉng nh·∫≠p n·∫øu Firebase l·ªói
        const loggedOutSection = document.getElementById('logged-out-section');
        const loggedInSection = document.getElementById('logged-in-section');
        
        if (loggedOutSection) {
            loggedOutSection.style.display = 'block';
            loggedOutSection.classList.remove('hidden');
        }
        if (loggedInSection) {
            loggedInSection.style.display = 'none';
            loggedInSection.classList.add('hidden');
        }
        
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho dev
        console.error('Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh Firebase trong /js/firebase-config.js');
    }
</script>